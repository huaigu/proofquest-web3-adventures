#!/usr/bin/env bun
/**
 * Quick Database Test Script
 * 
 * Simple script to test Supabase connection and basic operations
 * Usage: bun run scripts/quick-test.ts
 */

import { createClient } from '@supabase/supabase-js'

// Use environment variables or defaults
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://yjczcyadbrazsqspvpsb.supabase.co'
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqY3pjeWFkYnJhenNxc3B2cHNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyODIxODEsImV4cCI6MjA2Nzg1ODE4MX0.zMXj0eIoWa5YXE1GcB7CWvpxMbuhraGyQOMzkNiRY84'

console.log('üöÄ ProofQuest Quick Database Test')
console.log('=================================')

// Extract API URL from dashboard URL if needed
function getApiUrl(url: string): string {
  const dashboardMatch = url.match(/project\/([a-z0-9]+)/)
  if (dashboardMatch) {
    const projectRef = dashboardMatch[1]
    return `https://${projectRef}.supabase.co`
  }
  return url
}

const apiUrl = getApiUrl(SUPABASE_URL)
console.log(`üîó API URL: ${apiUrl}`)

// Create Supabase client
const supabase = createClient(apiUrl, SUPABASE_ANON_KEY)

async function testConnection(): Promise<void> {
  console.log('\nüîå Testing Supabase connection...')
  
  try {
    // Test basic query
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (error) {
      if (error.message.includes('relation "users" does not exist')) {
        console.log('‚ö†Ô∏è  Users table does not exist - need to run database setup')
        return
      }
      throw error
    }
    
    console.log('‚úÖ Connection successful!')
    
    // Count tables
    const tables = ['users', 'quests', 'quest_participations']
    for (const table of tables) {
      try {
        const { count, error: countError } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true })
        
        if (countError) {
          console.log(`‚ùå ${table}: ${countError.message}`)
        } else {
          console.log(`üìä ${table}: ${count} records`)
        }
      } catch (err) {
        console.log(`‚ùå ${table}: Table not accessible`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå Connection failed:', error)
  }
}

async function insertTestData(): Promise<void> {
  console.log('\nüìù Inserting test data...')
  
  try {
    // Test user
    const testUser = {
      address: '0x999999999999999999999999999999999999999',
      nickname: 'Quick Test User',
      bio: 'Generated by quick test script'
    }
    
    const { data: userData, error: userError } = await supabase
      .from('users')
      .upsert(testUser, { onConflict: 'address' })
      .select()
      .single()
    
    if (userError) {
      console.log(`‚ùå Failed to insert user: ${userError.message}`)
      return
    }
    
    console.log(`‚úÖ User created: ${userData.nickname}`)
    
    // Test quest
    const testQuest = {
      title: 'Quick Test Quest',
      description: 'This is a test quest created by the quick test script for validation purposes.',
      quest_type: 'twitter-interaction',
      interaction_type: 'follow',
      target_account: '@TestAccount',
      reward_type: 'ETH',
      total_reward_pool: 0.01,
      reward_per_participant: 0.001,
      distribution_method: 'immediate',
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      reward_claim_deadline: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(),
      creator_id: testUser.address,
      status: 'active'
    }
    
    const { data: questData, error: questError } = await supabase
      .from('quests')
      .insert(testQuest)
      .select()
      .single()
    
    if (questError) {
      console.log(`‚ùå Failed to insert quest: ${questError.message}`)
      return
    }
    
    console.log(`‚úÖ Quest created: ${questData.title}`)
    
    // Test participation
    const testParticipation = {
      user_address: testUser.address,
      quest_id: questData.id,
      status: 'pending'
    }
    
    const { data: participationData, error: participationError } = await supabase
      .from('quest_participations')
      .insert(testParticipation)
      .select()
      .single()
    
    if (participationError) {
      console.log(`‚ùå Failed to insert participation: ${participationError.message}`)
      return
    }
    
    console.log(`‚úÖ Participation created: ${participationData.id}`)
    
    console.log('\nüéâ Test data inserted successfully!')
    
  } catch (error) {
    console.error('‚ùå Failed to insert test data:', error)
  }
}

async function queryTestData(): Promise<void> {
  console.log('\nüîç Querying test data...')
  
  try {
    // Query with joins
    const { data: questsWithCreators, error } = await supabase
      .from('quests')
      .select(`
        id,
        title,
        status,
        reward_type,
        total_reward_pool,
        users:creator_id (
          nickname,
          address
        )
      `)
      .limit(5)
    
    if (error) {
      console.log(`‚ùå Query failed: ${error.message}`)
      return
    }
    
    console.log('üìã Recent quests:')
    questsWithCreators?.forEach((quest, index) => {
      console.log(`  ${index + 1}. ${quest.title}`)
      console.log(`     Status: ${quest.status}`)
      console.log(`     Reward: ${quest.total_reward_pool} ${quest.reward_type}`)
      console.log(`     Creator: ${quest.users?.nickname || 'Unknown'}`)
      console.log('')
    })
    
  } catch (error) {
    console.error('‚ùå Query failed:', error)
  }
}

async function main(): Promise<void> {
  await testConnection()
  await insertTestData()
  await queryTestData()
  
  console.log('\n‚úÖ Quick test completed!')
  console.log('\nüí° Next steps:')
  console.log('   1. If tables don\'t exist, run the setup-database.sql script in Supabase')
  console.log('   2. Start the server: bun run dev')
  console.log('   3. Test API endpoints: bun run scripts/test-api.ts')
}

main().catch(console.error)